---
- name: "Check authn-db package"
  stat:
    path: /home/{{ payara_user }}/downloads/authn.db-{{ authn_db_version }}-distro.zip
  register: packageResult

- name: "Download authn-db"
  get_url:
    url: https://repo.icatproject.org/repo/org/icatproject/authn.db/{{ authn_db_version }}/authn.db-{{ authn_db_version }}-distro.zip
    dest: /home/{{ payara_user }}/downloads
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0664
  when: packageResult.stat.exists is defined and packageResult.stat.exists == false

- name: "Check authn-db installation"
  stat:
    path: /home/{{ payara_user }}/install/authn.db
  register: installationResult

- name: "Unarchive authn-db if not installed"
  unarchive:
    src: /home/{{ payara_user }}/downloads/authn.db-{{ authn_db_version }}-distro.zip
    dest: /home/{{ payara_user }}/install
    remote_src: true
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
  when: installationResult.stat.exists is defined and installationResult.stat.exists == false

- name: "Check setup.properties file existence"
  local_action: stat path={{ role_path }}/files/setup.properties
  register: setupPropertiesResult

- name: "Configure authn-db setup.properties via copying"
  copy:
    src: files/setup.properties
    dest: /home/{{ payara_user }}/install/authn.db/setup.properties
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0600
  when: setupPropertiesResult.stat.exists is defined and setupPropertiesResult.stat.exists == true
  notify:
    - "authn-db-handler"

- name: "Configure authn-db setup.properties via templating"
  template:
    src: roles/setup.properties.j2
    dest: /home/{{ payara_user }}/install/authn.db/setup.properties
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0600
  when: setupPropertiesResult.stat.exists is defined and setupPropertiesResult.stat.exists == false
  notify:
    - "authn-db-handler"

- name: "Check run.properties file existence"
  local_action: stat path={{ role_path }}/files/run.properties
  register: runPropertiesResult

- name: "Configure authn-db run.properties via copying"
  copy:
    src: files/run.properties
    dest: /home/{{ payara_user }}/install/authn.db/run.properties
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0664
  when: runPropertiesResult.stat.exists is defined and runPropertiesResult.stat.exists == true
  notify:
    - "authn-db-handler"

- name: "Configure authn-db run.properties via templating"
  template:
    src: templates/run.properties.j2
    dest: /home/{{ payara_user }}/install/authn.db/run.properties
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0664
  when: runPropertiesResult.stat.exists is defined and runPropertiesResult.stat.exists == false
  notify:
    - "authn-db-handler"

- name: "Configure authn-db logback.xml"
  copy:
    src: files/logback.xml
    dest: /home/{{ payara_user }}/install/authn.db/logback.xml
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0664
  notify:
    - "authn-db-handler"

- name: "Setup authn-db if not setup"
  import_tasks: tasks/installation.yml
  when: (ansible_local is not defined) or (ansible_local.local is not defined) or (ansible_local.local.instantiations is not defined) or (ansible_local.local.instantiations.authn_db is not defined) or (ansible_local.local.instantiations.authn_db != 'true')

- name: "Set temporary fact to indicate authn_db is installed within play"
  set_fact:
    authn_db: true

- name: "Create PASSWD table if it doesnt exist"
  command: mysql --user={{ db_icat_username }} --password={{ db_icat_password }} -e "create table IF NOT EXISTS PASSWD (UserName VARCHAR(20), encodedPassword VARCHAR(20));" {{ icat_database }}

- name: 'Check if "notroot" user is already in database'
  command: mysql --user={{ db_icat_username }} --password={{ db_icat_password }} -e "SELECT USERNAME FROM PASSWD WHERE USERNAME='notroot'" {{ icat_database }}
  register: notrootResult

- name: 'Add "notroot" user to database'
  command: mysql --user={{ db_icat_username }} --password={{ db_icat_password }} -e "INSERT INTO PASSWD VALUES ('notroot', 'password');" {{ icat_database }}
  when: notrootResult.stdout == ""

- name: 'Check if "piOne" user is already in database'
  command: mysql --user={{ db_icat_username }} --password={{ db_icat_password }} -e "SELECT USERNAME FROM PASSWD WHERE USERNAME='piOne'" {{ icat_database }}
  register: piOneResult

- name: 'Add "piOne" user to database'
  command: mysql --user={{ db_icat_username }} --password={{ db_icat_password }} -e "INSERT INTO PASSWD VALUES ('piOne', 'piOne');" {{ icat_database }}
  when: piOneResult.stdout == ""

- name: 'Check if "piTwo" user is already in database'
  command: mysql --user={{ db_icat_username }} --password={{ db_icat_password }} -e "SELECT USERNAME FROM PASSWD WHERE USERNAME='piTwo'" {{ icat_database }}
  register: piTwoResult

- name: 'Add "piTwo" user to database'
  command: mysql --user={{ db_icat_username }} --password={{ db_icat_password }} -e "INSERT INTO PASSWD VALUES ('piTwo', 'piTwo');" {{ icat_database }}
  when: piTwoResult.stdout == ""

- name: 'Check if "root" user is already in database'
  command: mysql --user={{ db_icat_username }} --password={{ db_icat_password }} -e "SELECT USERNAME FROM PASSWD WHERE USERNAME='root'" {{ icat_database }}
  register: rootResult

- name: 'Add "root" user to database'
  command: mysql --user={{ db_icat_username }} --password={{ db_icat_password }} -e "INSERT INTO PASSWD VALUES ('root', 'password');" {{ icat_database }}
  when: rootResult.stdout == ""

- name: 'Check if "guest" user is already in database'
  command: mysql --user={{ db_icat_username }} --password={{ db_icat_password }} -e "SELECT USERNAME FROM PASSWD WHERE USERNAME='guest'" {{ icat_database }}
  register: guestResult

- name: 'Add "guest" user to database'
  command: mysql --user={{ db_icat_username }} --password={{ db_icat_password }} -e "INSERT INTO PASSWD VALUES ('guest', 'guess');" {{ icat_database }}
  when: guestResult.stdout == ""

- name: 'Check if "CIC" user is already in database'
  command: mysql --user={{ db_icat_username }} --password={{ db_icat_password }} -e "SELECT USERNAME FROM PASSWD WHERE USERNAME='CIC'" {{ icat_database }}
  register: CICResult

- name: 'Add "CIC" user to database'
  command: mysql --user={{ db_icat_username }} --password={{ db_icat_password }} -e "INSERT INTO PASSWD VALUES ('CIC','password');" {{ icat_database }}
  when: CICResult.stdout == ""
